{"version":3,"sources":["components/navbar/navbar.js","components/typedComponent/typedComponent.js","components/socialButtons/socialButtons.js","components/header/header.js","containers/page/Page.js","containers/App.js","serviceWorker.js","index.js"],"names":["navbar","props","react_default","a","createElement","className","typed","react_typed_default","strings","typeSpeed","SocialButtons","Fragment","href","target","React","Component","header","typedComponent","socialButtons","Page","components_navbar_navbar","components_header_header","App","page_Page","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAkBeA,SAhBA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAf,QAEAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEXH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,2CCqBDE,EA9BD,SAACL,GACX,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACVH,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACIK,QAAS,CAAC,qDACVC,UAAW,GACXJ,UAAU,0BAEdH,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,wDCoBDK,mLA7BP,OACIR,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,KACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAW,iBACZH,EAAAC,EAAAC,cAAA,KAAGQ,KAAI,yCAA4CP,UAAS,qBAAwBQ,OAAM,UACtFX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,yBAEJF,EAAAC,EAAAC,cAAA,KAAGQ,KAAI,+BAAkCP,UAAS,qBAAwBQ,OAAM,UAC5EX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,uBAEJF,EAAAC,EAAAC,cAAA,KAAGQ,KAAI,oCAAuCP,UAAS,qBAAwBQ,OAAM,UACjFX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,qBAEJF,EAAAC,EAAAC,cAAA,KAAGQ,KAAI,IAAOP,UAAS,sBACnBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cACbH,EAAAC,EAAAC,cAAA,sBAEJF,EAAAC,EAAAC,cAAA,KAAGQ,KAAI,IAAOP,UAAS,qBAAwBQ,OAAM,UACjDX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,gCAxBIU,IAAMC,WCkBnBC,EAhBA,SAACf,GACZ,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,KACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAACa,EAAD,MAEAf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACc,EAAD,WCETC,mLARP,OACIjB,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,KACIT,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACiB,EAAD,cALGP,IAAMC,WCQVO,mLANX,OACEpB,EAAAC,EAAAC,cAACmB,EAAD,aAHYR,aCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAE2B,EAAF,MAAUC,SAASC,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3223235f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst navbar = (props) => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <div className=\"navbar__logo-name\">Cozy</div>\r\n\r\n            <nav className=\"navbar__items\">\r\n\r\n                <div>Technologies</div>\r\n                <div>About</div>\r\n                <div>Projects</div>\r\n                <div>Contact</div>\r\n\r\n            </nav>\r\n        </div>\r\n    )\r\n};\r\nexport default navbar;","import React from 'react';\r\nimport Typed from 'react-typed';\r\n\r\nconst typed = (props) => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"heading-primary\">\r\n                <Typed\r\n                    strings={['Hi👋🏾, I\\'m Cozy 👽']}\r\n                    typeSpeed={20}\r\n                    className=\"heading-primary--main\"\r\n                />\r\n                <br />\r\n\r\n                <span className=\"heading-primary--sub\">\r\n                    Full-Stack Dev | Science & Tech | Smooth Operator\r\n                </span>\r\n\r\n                {/* <Typed\r\n                    strings={['I\\'m a full-stack developer',\r\n                        'I do full-stack JS',\r\n                        'I do Python Backends']}\r\n                    typeSpeed={100}\r\n                    backSpeed={80}\r\n                    className=\"heading-primary--sub\"\r\n                    loop >\r\n                </Typed> */}\r\n            </h1>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default typed;\r\n","import React from 'react';\r\n\r\nclass SocialButtons extends React.Component {\r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className={'icons__social'}>\r\n                    <a href={`https://linkedin.com/in/cosmasgikunju/`} className={`icons__social-item`} target={`_blank`}>\r\n                        <i className=\"fab fa-linkedin-in\"></i>\r\n                        <span>LinkedIn</span>\r\n                    </a>\r\n                    <a href={`https://github.com/ItsCosmas`} className={`icons__social-item`} target={`_blank`}>\r\n                        <i className=\"fab fa-github\"></i>\r\n                        <span>Github</span>\r\n                    </a>\r\n                    <a href={`https://medium.com/@gikunjucosmas`} className={`icons__social-item`} target={`_blank`}>\r\n                        <i className=\"fab fa-medium-m\"></i>\r\n                        <span>Blog</span>\r\n                    </a>\r\n                    <a href={`#`} className={`icons__social-item`} >\r\n                        <i className=\"fas fa-at\"></i>\r\n                        <span>Email</span>\r\n                    </a>\r\n                    <a href={`#`} className={`icons__social-item`} target={`_blank`}>\r\n                        <i className=\"fas fa-newspaper\"></i>\r\n                        <span>Resume</span>\r\n                    </a>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n\r\n    }\r\n}\r\nexport default SocialButtons;","import React from 'react';\r\nimport Typed from '../typedComponent/typedComponent';\r\nimport Social from '../socialButtons/socialButtons';\r\n\r\nconst header = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"header\">\r\n                <div className=\"header__intro-box\">\r\n                    <Typed />\r\n\r\n                    <div className=\"header__social\">\r\n                        <Social />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default header;","import React from 'react';\r\nimport Navbar from '../../components/navbar/navbar';\r\nimport Header from '../../components/header/header';\r\n\r\nclass Page extends React.Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Navbar />\r\n                <Header />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default Page;","import React, { Component } from 'react';\r\nimport '../styles/index.scss';\r\nimport Page from './page/Page';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Page />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(< App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}